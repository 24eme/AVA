# You can find more information about this file on the symfony website:
# http://www.symfony-project.org/reference/1_4/en/10-Routing

# default rules

# Auth

auth_login_no_cas:
  url: /login_no_cas
  param: { module: auth, action: login }

auth_logout:
  url: /logout
  param: { module: auth, action: logout }

auth_state:
  url: /auth/state
  param: { module: auth, action: state }

accueil:
  url: /
  param: { module: common, action: accueil }

# Common

contact:
  url: /contact
  param: { module: common, action: contact }

mentions_legales:
  url: /mentions-legales
  param: { module: common, action: mentionsLegales }

# DÃ©claration

declaration:
  url: /declaration
  param: { module: declaration, action: index }
  class: DeclarationRoute

declaration_doc:
  url: /declaration/doc
  param: { module: declaration, action: doc }

declaration_export:
  url: /declarations/export
  param: { module: declaration, action: export }

declaration_etablissement:
  url: /declarations/:identifiant
  param: { module: declaration, action: etablissement }
  class: DeclarationDeclarantRoute
  options:
    model:    EtablissementRoute
    type:     object
  requirements:
    sf_method: [get]

declaration_etablissement_selection:
  url: /declarations-etablissement-selection
  param: { module: declaration, action: etablissementSelection }

# PIECE

get_piece:
  url: /piece/get/:doc_id/:piece_id
  param: { module: piece, action: get }

forward_visu_piece:
  url: /piece/visualisation/:doc_id
  param: { module: piece, action: visualisation }

# FICHIER

pieces_historique:
  url: /historique-documents/:id
  param: { module: fichier, action: piecesHistorique }
  class: DeclarationDeclarantRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

get_fichier:
  url: /fichier/get/:id
  param: { module: fichier, action: get }
  class: FichierRoute
  options:
    model:    Fichier
    type:     object
  requirements:
    sf_method: [get]

upload_fichier:
  url: /fichier/upload/:id
  param: { module: fichier, action: upload }
  class: DeclarationDeclarantRoute
  options:
    model:    EtablissementDe
    type:     object
  requirements:
    sf_method: [get, post]

#DREVMARC

drevmarc_create:
  url: /drevmarc/creation/:id
  param: { module: drevmarc, action: create }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

drevmarc_create_papier:
  url: /drevmarc/creation-papier/:id
  param: { module: drevmarc, action: createPapier }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

drevmarc_edit:
  url: /drevmarc/edition/:id
  param: { module: drevmarc, action: edit }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]

drevmarc_exploitation:
  url: /drevmarc/exploitation/:id
  param: { module: drevmarc, action: exploitation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_revendication:
  url: /drevmarc/revendication/:id
  param: { module: drevmarc, action: revendication }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_validation:
  url: /drevmarc/validation/:id
  param: { module: drevmarc, action: validation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_validation_admin:
  url: /drevmarc/validation_admin/:id
  param: { module: drevmarc, action: validationAdmin }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]

drevmarc_confirmation:
  url: /drevmarc/confirmation/:id
  param: { module: drevmarc, action: confirmation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_visualisation:
  url: /drevmarc/visualisation/:id
  param: { module: drevmarc, action: visualisation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_delete:
  url: /drevmarc/suppression/:id
  param: { module: drevmarc, action: delete }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]

drevmarc_devalidation:
  url: /drevmarc/devalidation/:id
  param: { module: drevmarc, action: devalidation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]

drevmarc_export_pdf:
  url: /drevmarc/pdf/:id
  param: { module: drevmarc, action: PDF }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]

#Travaux Marc

travauxmarc_create:
  url: /travauxmarc/creation/:id
  param: { module: travauxmarc, action: create }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

travauxmarc_create_papier:
  url: /travauxmarc/creation-papier/:id
  param: { module: travauxmarc, action: createPapier }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

travauxmarc_edit:
  url: /travauxmarc/edition/:id
  param: { module: travauxmarc, action: edit }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get]

travauxmarc_exploitation:
  url: /travauxmarc/exploitation/:id
  param: { module: travauxmarc, action: exploitation }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get, post]

travauxmarc_fournisseurs:
  url: /travauxmarc/fournisseurs/:id
  param: { module: travauxmarc, action: fournisseurs }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get, post]

travauxmarc_distillation:
  url: /travauxmarc/distillation/:id
  param: { module: travauxmarc, action: distillation }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get, post]

travauxmarc_validation:
  url: /travauxmarc/validation/:id
  param: { module: travauxmarc, action: validation }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get, post]

travauxmarc_validation_admin:
  url: /travauxmarc/validation_admin/:id
  param: { module: travauxmarc, action: validationAdmin }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get]

travauxmarc_confirmation:
  url: /travauxmarc/confirmation/:id
  param: { module: travauxmarc, action: confirmation }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get, post]

travauxmarc_visualisation:
  url: /travauxmarc/visualisation/:id
  param: { module: travauxmarc, action: visualisation }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get, post]

travauxmarc_delete:
  url: /travauxmarc/suppression/:id
  param: { module: travauxmarc, action: delete }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get]

travauxmarc_devalidation:
  url: /travauxmarc/devalidation/:id
  param: { module: travauxmarc, action: devalidation }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get]

travauxmarc_export_pdf:
  url: /travauxmarc/pdf/:id
  param: { module: travauxmarc, action: PDF }
  class: TravauxMarcRoute
  options:
    model:    TravauxMarc
    type:     object
  requirements:
    sf_method: [get]

#Mon compte

compte_teledeclarant_creation:
  url: /compte
  param: { module: compte_teledeclarant, action: creation }

compte_creation_confirmation:
  url: /compte-creation-confirmation
  param: { module: compte_teledeclarant, action: creationConfirmation }

compte_mot_de_passe_oublie:
  url: /mot_de_passe_oublie
  param: { module: compte_teledeclarant, action: motDePasseOublie }

compte_teledeclarant_premiere_connexion:
  url: /compte-premiere-connexion
  param: { module: compte_teledeclarant, action: premiereConnexion }

mon_compte:
  url: /mon-compte
  param: { module: compte_teledeclarant, action: modification }

redirect_to_mon_compte_civa:
  url: /mon-compte-civa
  param: { module: compte_teledeclarant, action: redirectToMonCompteCiva }

#Compte et etablissement admin

compte_recherche:
  url: /compte/recherche
  param: { module: compte, action: recherche }
  class: ContactsRoute

compte_recherche_avancee:
  url: /compte/recherche-avancee
  param: { module: compte, action: rechercheAvancee }
  class: ContactsRoute

compte_recherche_json:
  url: /compte/recherche.json
  param: { module: compte, action: rechercheJson }

compte_recherche_csv:
  url: /compte/recherche.csv
  param: { module: compte, action: rechercheCsv }

compte_creation:
  url: /compte/creation/:type_compte
  param: { module: compte, action: creation }

compte_visualisation:
  url: /compte/visualisation/:id
  param: { module: compte, action: visualisation }
  class: ContactsCompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get]

compte_modification:
  url: /compte/modification/:id
  param: { module: compte, action: modification }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get,post]

compte_tags_manuels:
  url: /compte-tags-manuels
  param: { module: compte, action: allTagsManuels }
  requirements:
    sf_method: [get]

compte_archiver:
  url: /compte-archiver/:id
  param: { module: compte, action: archiver }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get]

compte_desarchiver:
  url: /compte-desarchiver/:id
  param: { module: compte, action: desarchiver }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get]

# DÃ©gustation

degustation:
  url: /tournee
  param: { module: degustation, action: index }
  requirements:
    sf_method: [get]
  class: DegustationGeneralRoute

degustation_declarant:
  url: /degustation/declarant/:identifiant
  param: { module: degustation, action: declarant }
  class: DegustationDeclarantRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get, post]

degustation_saisie_creation:
  url: /tournee/saisie-creation
  param: { module: degustation, action: saisieCreation }
  requirements:
    sf_method: [get, post]
  class: DegustationGeneralRoute

degustation_saisie:
  url: /tournee/saisie/:id
  param: { module: degustation, action: saisie }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_saisie_degustateurs:
  url: /tournee/saisie-degustateurs/:id
  param: { module: degustation, action: saisieDegustateurs }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_saisie_validation:
  url: /tournee/saisie-validation/:id
  param: { module: degustation, action: saisieValidation }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_edit:
  url: /tournee/edit/:id
  param: { module: degustation, action: edit }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_creation:
  url: /tournee/creation
  param: { module: degustation, action: creation }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_suppression:
  url: /tournee/suppression/:id
  param: { module: degustation, action: suppression }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_operateurs:
  url: /tournee/operateurs/:id
  param: { module: degustation, action: operateurs }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs:
  url: /tournee/degustateurs/:id
  param: { module: degustation, action: degustateurs }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs_type:
  url: /tournee/degustateurs/:id/:type
  param: { module: degustation, action: degustateursType }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs_type_precedent:
  url: /tournee/degustateurs/:id/:type/precedent
  param: { module: degustation, action: degustateursTypePrecedent }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs_type_suivant:
  url: /tournee/degustateurs/:id/:type/suivant
  param: { module: degustation, action: degustateursTypeSuivant }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_prelevements:
  url: /tournee/prelevements/:id
  param: { module: degustation, action: prelevements }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_organisation:
  url: /tournee/organisation/:id
  param: { module: degustation, action: organisation }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_agents:
  url: /tournee/agents/:id
  param: { module: degustation, action: agents }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_validation:
  url: /tournee/validation/:id
  param: { module: degustation, action: validation }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_visualisation:
  url: /tournee/visualisation/:id
  param: { module: degustation, action: visualisation }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_tournees_generate:
  url: /tournee/tournees-generation/:id
  param: { module: degustation, action: tourneesGenerate }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_tournee:
  url: /tournee/tournee/:id/:agent/:date
  param: { module: degustation, action: tournee }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_tournee_json:
  url: /tournee/tournee/:id/:agent/:date.json
  param: { module: degustation, action: tourneeJson }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_affectation_generate:
  url: /tournee/affectation-generation/:id
  param: { module: degustation, action: affectationGenerate }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_affectation:
  url: /tournee/affectation/:id
  param: { module: degustation, action: affectation }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_affectation_json:
  url: /tournee/affectation/:id.json
  param: { module: degustation, action: affectationJson }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustations:
  url: /tournee/degustations/:id
  param: { module: degustation, action: degustations }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_degustation:
  url: /tournee/degustation/:id/:commission
  param: { module: degustation, action: degustation }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_degustation_json:
  url: /tournee/degustation/:id/:commission.json
  param: { module: degustation, action: degustationJson }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_lever_anonymat:
  url: /tournee/lever-anonymat/:id
  param: { module: degustation, action: leverAnonymat }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_degustateurs_presence:
  url: /tournee/degustateurs-presence/:id
  param: { module: degustation, action: degustateursPresence }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs_presence_export:
  url: /tournee/degustateurs-presence/:id.csv
  param: { module: degustation, action: degustateursPresenceExport }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_courriers:
  url: /degustation/courrier/:id
  param: { module: degustation, action: courrier }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_generation_courriers:
  url: /degustation/generation-courrier/:id
  param: { module: degustation, action: generationCourrier }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_courrier_prelevement:
  url: /degustation/prelevement-courrier/:id/:hash_prelevement
  param: { module: degustation, action: courrierPrelevement }
  class: DegustationPrelevementRoute
  options:
    model:    Degustation
    type:     object
  requirements:
    sf_method: [get, post]

degustation_courriers_papier:
  url: /degustation/courriers-papier/:id
  param: { module: degustation, action: courriersPapier }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_cloturer:
  url: /degustation/cloturer/:id
  param: { module: degustation, action: cloturer }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_export_csv:
  url: /degustation/export-csv/:id
  param: { module: degustation, action: exportCsv }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_export_manquantes_csv:
  url: /degustation/export-manquantes-csv/:id
  param: { module: degustation, action: exportCsvManquantes }
  class: DegustationTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

#Constats

constats_planifications:
  url: /constats/planifications
  param: { module: constats, action: planifications }
  requirements:
    sf_method: [get, post]
  class: ConstatsGeneralRoute

constats:
  url: /constats/:jour
  param: { module: constats, action: index }
  requirements:
    sf_method: [get, post]
  class: ConstatsGeneralRoute

constats_planification_jour:
  url: /constats/planification/:jour
  param: { module: constats, action: planificationJour }
  requirements:
    sf_method: [get]
  class: ConstatsGeneralRoute

constats_tournee_suppression:
  url: /constats/tournee/suppression/:id
  param: { module: constats, action: tourneeDelete }
  requirements:
    sf_method: [get]
  class: ConstatsGeneralRoute

constat_pdf:
  url: /constat/:identifiant/:campagne/pdf/:identifiantconstat
  param: { module: constats, action: constatPdf }
  class: ConstatsRoute
  options:
    model:    Constat
    type:     object
  requirements:
    sf_method: [get]

constats_planification_ajout_agent:
  url: /constats/ajout-agent/:jour
  param: { module: constats, action: ajoutAgentTournee }
  requirements:
    sf_method: [get, post]
  class: ConstatsGeneralRoute

tournee_agent_accueil:
  url: /constat/accueil
  param: { module: constats, action: redirectInterfaceMobileAgent }
  requirements:
    sf_method: [get, post]
  class: ConstatsGeneralRoute

tournee_rendezvous_agent:
  url: /tournee/:id/rendezvous
  param: { module: constats, action: tourneeAgentRendezvous }
  class: ConstatsTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

tournee_rendezvous_agent_json:
  url: /tournee/:id/rendezvous.json
  param: { module: constats, action: tourneeAgentJsonRendezvous }
  class: ConstatsTourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

rendezvous_declarant:
  url: /rendezvous/declarant/:id
  param: { module: constats, action: rendezvousDeclarant }
  class: ConstatsDeclarantRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get, post]

rendezvous_declarant_remove:
  url: /rendezvous/suppression/:idrendezvous
  param: { module: constats, action: rendezvousDeclarantRemove }
  class: ConstatsDeclarantRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get, post]

rendezvous_creation:
  url: /rendezvous/creation/:id/:idchai
  param: { module: constats, action: rendezvousCreation }
  class: ConstatsDeclarantRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get, post]

rendezvous_modification:
  url: /rendezvous/modification/:id
  param: { module: constats, action: rendezvousModification }
  class: RendezvousRoute
  options:
    model:    Rendezvous
    type:     object
  requirements:
    sf_method: [get, post]


#Facturation

facturation:
  url: /facturation
  param: { module: facturation, action: index }
  requirements:
    sf_method: [get, post]
  class: FacturationRoute

facturation_massive:
  url: /facturation_massive
  param: { module: facturation, action: massive }
  requirements:
    sf_method: [get, post]
  class: FacturationRoute

facturation_pdf:
  url: /facturation/pdf/:id
  param: { module: facturation, action: latex }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get]

facturation_edition:
  url: /facturation/edition/:id
  param: { module: facturation, action: edition }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get, post]

facturation_avoir:
  url: /facturation/avoir/:id
  param: { module: facturation, action: avoir }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get, post]

facturation_paiement:
  url: /facturation/paiement/:id
  param: { module: facturation, action: paiement }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get, post]

facturation_regenerate:
  url: /facturation/regenerer/:id
  param: { module: facturation, action: regenerate }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get]

facturation_declarant:
  url: /facturation/declarant/:id
  param: { module: facturation, action: declarant }
  class: FacturationDeclarantRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get, post]


#GÃ©nÃ©ration

generation_view:
  url: /generation/:type_document/:date_emission
  param: { module: generation, action: view }
  requirements:
    sf_method: [get]

generation_delete:
  url: /generation/:type_document/:date_emission/delete
  param: { module: generation, action: delete }
  requirements:
    sf_method: [get]

generation_regenerate:
  url: /generation/:type_document/:date_emission/regenerer
  param: { module: generation, action: regenerate }
  requirements:
    sf_method: [get]

#Export

export:
  url: /export
  param: { module: export, action: index }
  requirements:
    sf_method: [get, post]
  class: ExportRoute

export_generation:
  url: /export/generation/:id
  param: { module: export, action: generation }
  requirements:
    sf_method: [get]
  class: ExportRoute

#DÃ©faut

default_index:
  url:   /:module
  param: { action: index }

default:
  url:   /:module/:action/*
