# You can find more information about this file on the symfony website:
# http://www.symfony-project.org/reference/1_4/en/10-Routing

# default rules

auth_login:
  url: /login
  param: { module: auth, action: login }

auth_logout:
  url: /logout
  param: { module: auth, action: logout }

auth_state:
  url: /auth/state
  param: { module: auth, action: state }

home:
  url: /
  param: { module: ava, action: home }

contact:
  url: /contact
  param: { module: ava, action: contact }

mentions_legales:
  url: /mentions-legales
  param: { module: ava, action: mentionsLegales }

admin:
  url: /admin
  param: { module: admin, action: index }

admin_doc:
  url: /admin/doc
  param: { module: admin, action: doc }

admin_export:
  url: /admin/export
  param: { module: admin, action: export }

drev_index:
  url: /drev
  param: { module: drev, action: index }

drev_request_dr:
  url: /drev/dr/request
  param: { module: drev, action: requestDR }

drev_push_dr:
  url: /drev/dr/push
  param: { module: drev, action: pushDR }

drev_pull_dr:
  url: /drev/dr/pull
  param: { module: drev, action: pullDR }

drev_create:
  url: /drev/creation/:id
  param: { module: drev, action: create }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

drev_create_papier:
  url: /drev/creation-papier/:id
  param: { module: drev, action: createPapier }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

drev_edit:
  url: /drev/edition/:id
  param: { module: drev, action: edit }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_edit:
  url: /drev/edition/:id
  param: { module: drev, action: edit }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_delete:
  url: /drev/suppression/:id
  param: { module: drev, action: delete }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_devalidation:
  url: /drev/devalidation/:id
  param: { module: drev, action: devalidation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_dr:
  url: /drev/dr/:id
  param: { module: drev, action: dr }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_dr_recuperation:
  url: /drev/dr-recuperation/:id
  param: { module: drev, action: drRecuperation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_dr_import:
  url: /drev/dr-import/:id
  param: { module: drev, action: drImport }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_dr_pdf:
  url: /drev/dr-pdf/:id
  param: { module: drev, action: drPdf }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_exploitation:
  url: /drev/exploitation/:id
  param: { module: drev, action: exploitation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication_recapitulatif:
  url: /drev/drev_revendication-recapitulatif/:id
  param: { module: drev, action: revendicationRecapitulatif }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication_ajout:
  url: /drev/revendication/:id/ajout
  param: { module: drev, action: revendicationAjoutProduit }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication_appellation_ajout:
  url: /drev/revendication/:id/appellation_ajout
  param: { module: drev, action: revendicationAjoutAppellation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [post]

drev_revendication:
  url: /drev/revendication/:id/:appellation
  param: { module: drev, action: revendication, appellation: 0 }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication_cepage:
  url: /drev/revendication/:id/cepage/:hash
  param: { module: drev, action: revendicationCepage }
  class: DRevNoeudRoute
  options:
    model:    DRevAppellation
    type:     object
  requirements:
    sf_method: [get, post]

drev_revendication_cepage_ajout:
  url: /drev/revendication/:id/cepage/:hash/ajout
  param: { module: drev, action: revendicationCepageAjoutProduit }
  class: DRevNoeudRoute
  options:
    model:    DRevAppellation
    type:     object
  requirements:
    sf_method: [post]

drev_degustation_conseil:
  url: /drev/degustation-conseil/:id
  param: { module: drev, action: degustationConseil }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_lots:
  url: /drev/lots/:id/:prelevement
  param: { module: drev, action: lots }
  class: DRevPrelevementRoute
  options:
    model:    DRevPrelevement
    type:     object
  requirements:
    sf_method: [get, post]

drev_lots_ajout:
  url: /drev/lots/:id/:prelevement/ajout
  param: { module: drev, action: lotsAjoutProduit }
  class: DRevPrelevementRoute
  options:
    model:    DRevPrelevement
    type:     object
  requirements:
    sf_method: [post]

drev_controle_externe:
  url: /drev/controle-externe/:id
  param: { module: drev, action: controleExterne }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_validation:
  url: /drev/validation/:id
  param: { module: drev, action: validation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_validation_admin:
  url: /drev/validation_admin/:id
  param: { module: drev, action: validationAdmin }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

drev_confirmation:
  url: /drev/confirmation/:id
  param: { module: drev, action: confirmation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_visualisation:
  url: /drev/visualisation/:id
  param: { module: drev, action: visualisation }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get, post]

drev_export_pdf:
  url: /drev/pdf/:id
  param: { module: drev, action: PDF }
  class: DRevRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

#DREVMARC
drevmarc_create:
  url: /drevmarc/creation/:id
  param: { module: drevmarc, action: create }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

drevmarc_create_papier:
  url: /drevmarc/creation-papier/:id
  param: { module: drevmarc, action: createPapier }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

drevmarc_edit:
  url: /drevmarc/edition/:id
  param: { module: drevmarc, action: edit }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]

drevmarc_exploitation:
  url: /drevmarc/exploitation/:id
  param: { module: drevmarc, action: exploitation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_revendication:
  url: /drevmarc/revendication/:id
  param: { module: drevmarc, action: revendication }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_validation:
  url: /drevmarc/validation/:id
  param: { module: drevmarc, action: validation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_validation_admin:
  url: /drevmarc/validation_admin/:id
  param: { module: drevmarc, action: validationAdmin }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]

drevmarc_confirmation:
  url: /drevmarc/confirmation/:id
  param: { module: drevmarc, action: confirmation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_visualisation:
  url: /drevmarc/visualisation/:id
  param: { module: drevmarc, action: visualisation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get, post]

drevmarc_delete:
  url: /drevmarc/suppression/:id
  param: { module: drevmarc, action: delete }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]

drevmarc_devalidation:
  url: /drevmarc/devalidation/:id
  param: { module: drevmarc, action: devalidation }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]


drevmarc_export_pdf:
  url: /drevmarc/pdf/:id
  param: { module: drevmarc, action: PDF }
  class: DRevMarcRoute
  options:
    model:    DRevMarc
    type:     object
  requirements:
    sf_method: [get]

#Mon compte

compte_creation:
  url: /compte
  param: { module: compte, action: creation }

compte_creation_confirmation:
  url: /compte-creation-confirmation
  param: { module: compte, action: creationConfirmation }

compte_mot_de_passe_oublie:
  url: /mot_de_passe_oublie
  param: { module: compte, action: motDePasseOublie }

mon_compte:
  url: /mon-compte
  param: { module: compte, action: modification }

redirect_to_mon_compte_civa:    
  url: /mon-compte-civa
  param: { module: compte, action: redirectToMonCompteCiva }

#Compte et etablissement admin

compte_recherche:
  url: /compte/recherche
  param: { module: compte, action: recherche }

compte_recherche_avancee:
  url: /compte/recherche-avancee
  param: { module: compte, action: rechercheAvancee }

compte_recherche_json:
  url: /compte/recherche.json
  param: { module: compte, action: rechercheJson }

compte_recherche_csv:
  url: /compte/recherche.csv
  param: { module: compte, action: rechercheCsv }

compte_choice_creation_admin:
  url: /compte-choice-admin-creation
  param: { module: compte, action: choiceCreationAdmin }

compte_creation_admin:
  url: /compte-admin-creation/:type_compte
  param: { module: compte, action: creationAdmin }

compte_visualisation_admin:
  url: /compte-visualisation/:id
  param: { module: compte, action: visualisationAdmin }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get]

compte_modification_admin:
  url: /compte-modification/:id
  param: { module: compte, action: modificationAdmin }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get,post]

compte_tags_manuels:
  url: /compte-tags-manuels
  param: { module: compte, action: allTagsManuels }
  requirements:
    sf_method: [get]

compte_redirect_espace_etablissement:
  url: /compte-redirect-espace-etablissement/:id
  param: { module: compte, action: redirectEspaceEtablissement }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get]

compte_archiver:
  url: /compte-archiver/:id
  param: { module: compte, action: archiver }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get]

compte_desarchiver:
  url: /compte-desarchiver/:id
  param: { module: compte, action: desarchiver }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get]

# Dégustation

degustation:
  url: /tournee
  param: { module: degustation, action: index }
  requirements:
    sf_method: [get]

degustation_edit:
  url: /tournee/edit/:id
  param: { module: degustation, action: edit }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_creation:
  url: /tournee/creation/:id
  param: { module: degustation, action: creation }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_operateurs:
  url: /tournee/operateurs/:id
  param: { module: degustation, action: operateurs }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs:
  url: /tournee/degustateurs/:id
  param: { module: degustation, action: degustateurs }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs_type:
  url: /tournee/degustateurs/:id/:type
  param: { module: degustation, action: degustateursType }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs_type_precedent:
  url: /tournee/degustateurs/:id/:type/precedent
  param: { module: degustation, action: degustateursTypePrecedent }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs_type_suivant:
  url: /tournee/degustateurs/:id/:type/suivant
  param: { module: degustation, action: degustateursTypeSuivant }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_prelevements:
  url: /tournee/prelevements/:id
  param: { module: degustation, action: prelevements }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_organisation:
  url: /tournee/organisation/:id
  param: { module: degustation, action: organisation }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_agents:
  url: /tournee/agents/:id
  param: { module: degustation, action: agents }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_validation:
  url: /tournee/validation/:id
  param: { module: degustation, action: validation }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_visualisation:
  url: /tournee/visualisation/:id
  param: { module: degustation, action: visualisation }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_tournees_generate:
  url: /tournee/tournees-generation/:id
  param: { module: degustation, action: tourneesGenerate }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_tournee:
  url: /tournee/tournee/:id/:agent/:date
  param: { module: degustation, action: tournee }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_tournee_json:
  url: /tournee/tournee/:id/:agent/:date.json
  param: { module: degustation, action: tourneeJson }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_affectation_generate:
  url: /tournee/affectation-generation/:id
  param: { module: degustation, action: affectationGenerate }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_affectation:
  url: /tournee/affectation/:id
  param: { module: degustation, action: affectation }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_affectation_json:
  url: /tournee/affectation/:id.json
  param: { module: degustation, action: affectationJson }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustations:
  url: /tournee/degustations/:id
  param: { module: degustation, action: degustations }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_degustation:
  url: /tournee/degustation/:id/:commission
  param: { module: degustation, action: degustation }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_degustation_json:
  url: /tournee/degustation/:id/:commission.json
  param: { module: degustation, action: degustationJson }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_lever_anonymat:
  url: /tournee/lever-anonymat/:id
  param: { module: degustation, action: leverAnonymat }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get]

degustation_degustateurs_presence:
  url: /tournee/degustateurs-presence/:id
  param: { module: degustation, action: degustateursPresence }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_degustateurs_presence_export:
  url: /tournee/degustateurs-presence/:id.csv
  param: { module: degustation, action: degustateursPresenceExport }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_courriers:
  url: /degustation/courrier/:id
  param: { module: degustation, action: courrier }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_generation_courriers:
  url: /degustation/generation-courrier/:id
  param: { module: degustation, action: generationCourrier }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_courrier_prelevement:
  url: /degustation/prelevement-courrier/:id/:hash_prelevement
  param: { module: degustation, action: courrierPrelevement }
  class: DegustationPrelevementRoute
  options:
    model:    Degustation
    type:     object
  requirements:
    sf_method: [get, post]

degustation_courriers_papier:
  url: /degustation/courriers-papier/:id
  param: { module: degustation, action: courriersPapier }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

degustation_cloturer:
  url: /degustation/cloturer/:id
  param: { module: degustation, action: cloturer }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]



# Parcellaire

parcellaire_delete:
  url: /parcellaire/supprimer/:id
  param: { module: parcellaire, action: delete }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get]


parcellaire_devalidation:
  url: /parcellaire/devalidation/:id
  param: { module: parcellaire, action: devalidation }
  class: ParcellaireRoute
  options:
    model:    DRev
    type:     object
  requirements:
    sf_method: [get]

parcellaire_create:
  url: /parcellaire/creation/:id
  param: { module: parcellaire, action: create }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

parcellaire_create_papier:
  url: /parcellaire/creation-papier/:id
  param: { module: parcellaire, action: createPapier }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

parcellaire_cremant_create:
  url: /parcellaireCremant/creation/:id
  param: { module: parcellaireCremant, action: create }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

parcellaire_cremant_create_papier:
  url: /parcellaireCremant/creation-papier/:id
  param: { module: parcellaireCremant, action: createPapier }
  class: EtablissementRoute
  options:
    model:    Etablissement
    type:     object
  requirements:
    sf_method: [get]

parcellaire_edit:
  url: /parcellaire/edition/:id
  param: { module: parcellaire, action: edit }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get]

parcellaire_exploitation:
  url: /parcellaire/exploitation/:id
  param: { module: parcellaire, action: exploitation }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get, post]

parcellaire_propriete:
  url: /parcellaire/propriete/:id
  param: { module: parcellaire, action: propriete }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get, post]

parcellaire_parcelles:
  url: /parcellaire/parcelles/:id/:appellation
  param: { module: parcellaire, action: parcelles }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get,post]

parcellaire_parcelle_ajout:
  url: /parcellaire/ajoutParcelle/:id/:appellation
  param: { module: parcellaire, action: ajoutParcelle }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [post]

parcellaire_parcelle_delete:
  url: /parcellaire/deleteParcelle/:id/:appellation/:parcelle
  param: { module: parcellaire, action: deleteParcelle }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get]

parcellaire_acheteurs:
  url: /parcellaire/acheteurs/:id
  param: { module: parcellaire, action: acheteurs }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get,post]

parcellaire_validation:
  url: /parcellaire/validation/:id
  param: { module: parcellaire, action: validation }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get,post]

parcellaire_confirmation:
  url: /parcellaire/confirmation/:id
  param: { module: parcellaire, action: confirmation }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get,post]

parcellaire_export_pdf:
  url: /parcellaire/pdf/:id
  param: { module: parcellaire, action: PDF }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get]

parcellaire_visualisation:
  url: /parcellaire/visualisation/:id
  param: { module: parcellaire, action: visualisation }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get]

parcellaire_export_csv_document:
  url: /parcellaire/export-csv/:id
  param: { module: parcellaire, action: exportCsvParcellaire }
  class: ParcellaireRoute
  options:
    model:    Parcellaire
    type:     object
  requirements:
    sf_method: [get]

#Constats

constats_planifications:
  url: /constats/planifications
  param: { module: constats, action: planifications }
  requirements:
    sf_method: [get, post]

constats:
  url: /constats/:jour
  param: { module: constats, action: index }
  requirements:
    sf_method: [get, post]

constats_planification_jour:
  url: /constats/planification/:jour
  param: { module: constats, action: planificationJour }
  requirements:
    sf_method: [get]

constats_planification_ajout_agent:
  url: /constats/ajout-agent/:jour
  param: { module: constats, action: ajoutAgentTournee }
  requirements:
    sf_method: [get, post]

tournee_rendezvous_agent:
  url: /tournee/:id/rendezvous
  param: { module: constats, action: tourneeAgentRendezvous }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

tournee_rendezvous_agent_json:
  url: /tournee/:id/rendezvous.json
  param: { module: constats, action: tourneeAgentJsonRendezvous }
  class: TourneeRoute
  options:
    model:    Tournee
    type:     object
  requirements:
    sf_method: [get, post]

rendezvous_declarant:
  url: /rendezvous/declarant/:id
  param: { module: constats, action: rendezvousDeclarant }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get, post]

rendezvous_creation:
  url: /rendezvous/creation/:id/:idchai
  param: { module: constats, action: rendezvousCreation }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get, post]

rendezvous_modification:
  url: /rendezvous/modification/:identifiant/:dateheure
  param: { module: constats, action: rendezvousModification }
  class: RendezvousRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get, post]


#Facturation

facturation:
  url: /facturation
  param: { module: facturation, action: index }
  requirements:
    sf_method: [get, post]

facturation_massive:
  url: /facturation_massive
  param: { module: facturation, action: massive }
  requirements:
    sf_method: [get, post]

facturation_pdf:
  url: /facturation/pdf/:id
  param: { module: facturation, action: latex }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get]

facturation_edition:
  url: /facturation/edition/:id
  param: { module: facturation, action: edition }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get, post]

facturation_avoir:
  url: /facturation/avoir/:id
  param: { module: facturation, action: avoir }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get, post]

facturation_paiement:
  url: /facturation/paiement/:id
  param: { module: facturation, action: paiement }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get, post]

facturation_regenerate:
  url: /facturation/regenerer/:id
  param: { module: facturation, action: regenerate }
  class: FactureRoute
  options:
    model:    Facture
    type:     object
  requirements:
    sf_method: [get]

facturation_declarant:
  url: /facturation/declarant/:id
  param: { module: facturation, action: declarant }
  class: CompteRoute
  options:
    model:    Compte
    type:     object
  requirements:
    sf_method: [get, post]


#Génération

generation_view:
  url: /generation/:type_document/:date_emission
  param: { module: generation, action: view }
  requirements:
    sf_method: [get]

generation_delete:
  url: /generation/:type_document/:date_emission/delete
  param: { module: generation, action: delete }
  requirements:
    sf_method: [get]

generation_regenerate:
  url: /generation/:type_document/:date_emission/regenerer
  param: { module: generation, action: regenerate }
  requirements:
    sf_method: [get]

#Export

export:
  url: /export
  param: { module: export, action: index }
  requirements:
    sf_method: [get, post]

export_generation:
  url: /export/generation/:id
  param: { module: export, action: generation }
  requirements:
    sf_method: [get]

#Défaut

default_index:
  url:   /:module
  param: { action: index }

default:
  url:   /:module/:action/*
